name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}
  NEXT_PUBLIC_GTM_ID: ${{ secrets.NEXT_PUBLIC_GTM_ID }}
  NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION: ${{ secrets.NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION }}
  NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
  NEXT_PUBLIC_LOGROCKET_APP_ID: ${{ secrets.NEXT_PUBLIC_LOGROCKET_APP_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security checks
      run: |
        npm run security-check
        npm run type-check
        npm run lint
        npm test
        
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        
    - name: Deploy to S3
      run: |
        aws s3 sync ./out s3://${{ secrets.AWS_S3_BUCKET }} --delete
        
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        
    - name: Create New Relic Deployment Marker
      run: |
        curl -X POST "https://api.newrelic.com/v2/applications/${{ secrets.NEW_RELIC_APPLICATION_ID }}/deployments.json" \
          -H "Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "deployment": {
              "revision": "${{ github.sha }}",
              "changelog": "GitHub Actions deployment",
              "description": "Deployed via GitHub Actions",
              "user": "${{ github.actor }}"
            }
          }'
        
    - name: Notify Sentry of Deploy
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      with:
        environment: production
        
    - name: Run Post-Deploy Health Checks
      run: |
        # Wait for CloudFront propagation
        sleep 60
        
        # Check if site is accessible
        curl --fail --max-time 30 ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        
        # Check if API is accessible
        curl --fail --max-time 30 ${{ secrets.NEXT_PUBLIC_API_URL }}/health
        
        # Verify SSL certificates
        curl --fail -I https://www.disasterrecoveryqld.au
        
        # Check critical pages
        for path in "/" "/en-AU" "/en-AU/services" "/sitemap.xml" "/robots.txt"; do
          curl --fail --max-time 30 "${{ secrets.NEXT_PUBLIC_SITE_URL }}${path}"
          echo "✓ ${path} is accessible"
        done
        
    - name: Notify Team
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'deployments'
        slack-message: |
          Deployment ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  monitoring:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate Performance Report
      run: |
        # Install Lighthouse
        npm install -g lighthouse
        
        # Run Lighthouse checks
        lighthouse ${{ secrets.NEXT_PUBLIC_SITE_URL }} \
          --chrome-flags="--headless --no-sandbox" \
          --output json \
          --output html \
          --output-path ./lighthouse-report
          
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v2
      with:
        name: performance-reports
        path: ./lighthouse-report
        
    - name: Monitor Error Rates
      run: |
        # Check Sentry for new errors
        curl -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
          "https://sentry.io/api/0/projects/${{ secrets.SENTRY_ORG }}/${{ secrets.SENTRY_PROJECT }}/issues/?query=is:unresolved" \
          > sentry-errors.json
          
        # Parse and alert if there are critical errors
        if [ $(jq length sentry-errors.json) -gt 0 ]; then
          echo "⚠️ Found unresolved errors in Sentry"
          cat sentry-errors.json | jq '.[].title'
        fi
