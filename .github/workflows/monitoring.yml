name: System Monitoring

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:  # Allow manual trigger

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run health check
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
        NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
        LOGROCKET_APP_ID: ${{ secrets.LOGROCKET_APP_ID }}
      run: npm run monitor:health

    - name: Check system status
      if: success() || failure()  # Run even if health check fails
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
      run: npm run monitor:status

    - name: Report to New Relic
      if: always()
      env:
        NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
        NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          newrelic-admin record-custom-event SystemStatus "{status: 'healthy'}"
        else
          newrelic-admin record-custom-event SystemStatus "{status: 'unhealthy'}"
        fi

    - name: Report to Sentry
      if: failure()
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
      run: |
        npx @sentry/cli releases new monitoring-check-${{ github.sha }}
        npx @sentry/cli releases set-commits monitoring-check-${{ github.sha }} --auto
        npx @sentry/cli releases finalize monitoring-check-${{ github.sha }}
        npx @sentry/cli releases deploys monitoring-check-${{ github.sha }} new -e production

    - name: Create GitHub Issue
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ System Health Check Failed',
            body: `System health check failed at ${new Date().toISOString()}

            Check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.

            ## Status
            - Job Status: ${context.job.status}
            - Run ID: ${context.runId}
            - Commit: ${context.sha}

            Please investigate and resolve any issues.`,
            labels: ['monitoring', 'bug', 'high-priority']
          });

    - name: Notify Slack
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'monitoring-alerts'
        slack-message: |
          ðŸš¨ *System Health Check Failed*
          â€¢ Environment: Production
          â€¢ Time: ${{ steps.date.outputs.date }}
          â€¢ Status: ${{ job.status }}
          â€¢ Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  performance:
    runs-on: ubuntu-latest
    needs: monitor
    if: always()  # Run even if monitor job fails
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check cache performance
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
      run: npm run cache:status

    - name: Monitor API performance
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      run: |
        response_time=$(curl -o /dev/null -s -w "%{time_total}\n" $NEXT_PUBLIC_API_URL/health)
        echo "API response time: ${response_time}s"
        if (( $(echo "$response_time > 5" | bc -l) )); then
          echo "API response time exceeds threshold"
          exit 1
        fi

    - name: Report metrics
      if: always()
      env:
        NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
      run: |
        newrelic-admin record-metric "Cache.Size" "$(npm run cache:status | grep size | awk '{print $2}')"
        newrelic-admin record-metric "API.ResponseTime" "$response_time"
